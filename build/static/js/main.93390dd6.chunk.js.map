{"version":3,"sources":["assets/questionnaire.tsx","assets/gfx/logo-fe.svg","assets/gfx/bg.svg","assets/gfx/logo-petal.svg","templates/splash.tsx","templates/questionnaire.tsx","assets/labels.tsx","assets/gfx/flourishing_bulb_petal.svg","assets/gfx/flourishing_outline_petal.svg","assets/gfx/flourishing_red_petal.svg","assets/gfx/flourishing_yellow_petal.svg","assets/gfx/flourishing_orange_petal.svg","assets/gfx/flourishing_cyan_petal.svg","assets/gfx/flourishing_navy_petal.svg","templates/results.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["questions","q1","id","text","axis","score","q2","q3","q4","q5","q6","q7","q8","q9","q10","q11","q12","q13","q14","q15","q16","q17","q18","q19","q20","q21","q22","q23","q24","q25","q26","q27","q28","q29","q30","q31","q32","q33","q34","Splash","props","className","style","background","bg","backgroundRepeat","backgroundPosition","backgroundSize","href","target","rel","onClick","start","src","petalLogo","display","Question","question","type","name","updateAnswer","Questionnaire","answersThisPage","q","progress","renderedQuestions","push","renderQuestions","Object","entries","alert","continue","length","back","labels","PhysicalHealth","title","subtitle","color","SpiritualHealth","SocialHealth","EmotionalHealth","CognitiveHealth","ToggleAnswersButton","useState","pressed","setPressed","Label","padding","pos","y","x","label","toFixed","borderColor","Graph","console","log","scores","w","a","Math","PI","centerBulb","place","angle","o","petal","scaledArea","scaledRadius","sqrt","r","d","scalePetal","offset","coords","c","rad","cos","sin","width","left","top","transform","bulb","petalOutline","petalForPH","petalForEH","petalForCH","petalForSpH","petalForSoH","Answers","responses","count","colors","key","value","whiteSpace","floor","Results","graph","showResponses","newCode","setNewCode","viewMeasure","onChange","e","loadResults","generateCode","code","base64","require","App","view","setView","recordedAnswers","recordAnswers","setProgress","setCode","remainingQuestions","unansweredQuestions","sample","n","min","slice","scoreResponses","totals","loadResponses","decoded","s","Number","decode","toLocaleString","useGrouping","decodeResponses","codeLikelyValid","newResponses","JSON","parse","stringify","getResponsesFromCode","logo","visibility","answers","newAnswer","formContinueAction","copyOfAnswers","toString","encoded","encode","encodeResponses","content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAEaA,G,MAAsC,CAC/CC,GAAG,CAACC,GAAG,KAAMC,KAAK,gDAAiDC,KAAK,iBAAkBC,MAAM,GAChGC,GAAG,CAACJ,GAAG,KAAMC,KAAK,wDAAyDC,KAAK,iBAAkBC,MAAM,GACxGE,GAAG,CAACL,GAAG,KAAMC,KAAK,mDAAoDC,KAAK,iBAAkBC,MAAM,GACnGG,GAAG,CAACN,GAAG,KAAMC,KAAK,4CAA6CC,KAAK,iBAAkBC,MAAM,GAC5FI,GAAG,CAACP,GAAG,KAAMC,KAAK,6CAA8CC,KAAK,iBAAkBC,MAAM,GAC7FK,GAAG,CAACR,GAAG,KAAMC,KAAK,iEAA8CC,KAAK,iBAAkBC,MAAM,GAC7FM,GAAG,CAACT,GAAG,KAAMC,KAAK,gDAAiDC,KAAK,iBAAkBC,MAAM,GAChGO,GAAG,CAACV,GAAG,KAAMC,KAAK,yBAA0BC,KAAK,iBAAkBC,MAAM,GACzEQ,GAAG,CAACX,GAAG,KAAMC,KAAK,6CAA8CC,KAAK,iBAAkBC,MAAM,GAC7FS,IAAI,CAACZ,GAAG,MAAOC,KAAK,qDAAsDC,KAAK,kBAAmBC,MAAM,GACxGU,IAAI,CAACb,GAAG,MAAOC,KAAK,wCAAyCC,KAAK,kBAAmBC,MAAM,GAC3FW,IAAI,CAACd,GAAG,MAAOC,KAAK,oCAAqCC,KAAK,kBAAmBC,MAAM,GACvFY,IAAI,CAACf,GAAG,MAAOC,KAAK,iDAAkDC,KAAK,kBAAmBC,MAAM,GACpGa,IAAI,CAAChB,GAAG,MAAOC,KAAK,oDAAqDC,KAAK,kBAAmBC,MAAM,GACvGc,IAAI,CAACjB,GAAG,MAAOC,KAAK,+BAAgCC,KAAK,kBAAmBC,MAAM,GAClFe,IAAI,CAAClB,GAAG,MAAOC,KAAK,6DAA8DC,KAAK,kBAAmBC,MAAM,GAChHgB,IAAI,CAACnB,GAAG,MAAOC,KAAK,2EAA4EC,KAAK,kBAAmBC,MAAM,GAC9HiB,IAAI,CAACpB,GAAG,MAAOC,KAAK,mEAAoEC,KAAK,kBAAmBC,MAAM,GACtHkB,IAAI,CAACrB,GAAG,MAAOC,KAAK,yFAA0FC,KAAK,kBAAmBC,MAAM,GAC5ImB,IAAI,CAACtB,GAAG,MAAOC,KAAK,0CAA2CC,KAAK,eAAgBC,MAAM,GAC1FoB,IAAI,CAACvB,GAAG,MAAOC,KAAK,8BAA+BC,KAAK,eAAgBC,MAAM,GAC9EqB,IAAI,CAACxB,GAAG,MAAOC,KAAK,6BAA8BC,KAAK,eAAgBC,MAAM,GAC7EsB,IAAI,CAACzB,GAAG,MAAOC,KAAK,mBAAoBC,KAAK,eAAgBC,MAAM,GACnEuB,IAAI,CAAC1B,GAAG,MAAOC,KAAK,6CAA8CC,KAAK,eAAgBC,MAAM,GAC7FwB,IAAI,CAAC3B,GAAG,MAAOC,KAAK,yEAA0EC,KAAK,eAAgBC,MAAM,GACzHyB,IAAI,CAAC5B,GAAG,MAAOC,KAAK,0DAA2DC,KAAK,kBAAmBC,MAAM,GAC7G0B,IAAI,CAAC7B,GAAG,MAAOC,KAAK,wCAAyCC,KAAK,kBAAmBC,MAAM,GAC3F2B,IAAI,CAAC9B,GAAG,MAAOC,KAAK,gFAAiFC,KAAK,kBAAmBC,MAAM,GACnI4B,IAAI,CAAC/B,GAAG,MAAOC,KAAK,6CAA8CC,KAAK,kBAAmBC,MAAM,GAChG6B,IAAI,CAAChC,GAAG,MAAOC,KAAK,2DAA4DC,KAAK,kBAAmBC,MAAM,GAC9G8B,IAAI,CAACjC,GAAG,MAAOC,KAAK,2BAA4BC,KAAK,kBAAmBC,MAAM,GAC9E+B,IAAI,CAAClC,GAAG,MAAOC,KAAK,oDAAqDC,KAAK,kBAAmBC,MAAM,GACvGgC,IAAI,CAACnC,GAAG,MAAOC,KAAK,gDAAiDC,KAAK,kBAAmBC,MAAM,GACnGiC,IAAI,CAACpC,GAAG,MAAOC,KAAK,6CAA8CC,KAAK,kBAAmBC,MAAM,KCpCrF,MAA0B,oCCA1B,MAA0B,+BCA1B,MAA0B,uC,OCGlC,SAASkC,EAAOC,GAKnB,OACI,qBAAKC,UAAU,yDAAyDC,MAAO,CAC3EC,WAAW,OAAD,OAASC,EAAT,KACVC,iBAAkB,YAClBC,mBAAoB,QACpBC,eAAgB,aAJpB,SAMI,sBAAKN,UAAU,qCAAf,UACI,oBAAIA,UAAU,6BAAd,wBAGA,oBAAIA,UAAU,eAAd,2CAGA,mBAAGA,UAAU,cAAb,gEAGA,mBAAGA,UAAU,4CAA4CO,KAAK,qCAAqCC,OAAO,SAASC,IAAI,aAAvH,wBAGA,yBAAQT,UAAU,6CAA6CU,QAAS,WAAKX,EAAMW,QAAQC,SAA3F,UACI,qBAAKC,IAAKC,EAAWb,UAAU,kBAAkBC,MAAO,CAACa,QAAS,YADtE,wBC1BhB,SAASC,EAAShB,GAMd,OACI,sBAAKC,UAAU,0BAAf,UACI,4BAAID,EAAMiB,SAAStD,OACnB,sBAAKsC,UAAU,8BAAf,8BAEI,uBAAOA,UAAU,MAAMiB,KAAK,QAAuCC,KAAMnB,EAAMiB,SAASvD,GAAIiD,QAAS,WAAKX,EAAMW,QAAQS,aAAapB,EAAMiB,SAASvD,GAAI,KAAxJ,UAA4CsC,EAAMiB,SAASvD,GAA3D,OACA,uBAAOuC,UAAU,MAAMiB,KAAK,QAAuCC,KAAMnB,EAAMiB,SAASvD,GAAIiD,QAAS,WAAKX,EAAMW,QAAQS,aAAapB,EAAMiB,SAASvD,GAAI,KAAxJ,UAA4CsC,EAAMiB,SAASvD,GAA3D,OACA,uBAAOuC,UAAU,MAAMiB,KAAK,QAAuCC,KAAMnB,EAAMiB,SAASvD,GAAIiD,QAAS,WAAKX,EAAMW,QAAQS,aAAapB,EAAMiB,SAASvD,GAAI,KAAxJ,UAA4CsC,EAAMiB,SAASvD,GAA3D,OACA,uBAAOuC,UAAU,MAAMiB,KAAK,QAAuCC,KAAMnB,EAAMiB,SAASvD,GAAIiD,QAAS,WAAKX,EAAMW,QAAQS,aAAapB,EAAMiB,SAASvD,GAAI,KAAxJ,UAA4CsC,EAAMiB,SAASvD,GAA3D,OACA,uBAAOuC,UAAU,MAAMiB,KAAK,QAAuCC,KAAMnB,EAAMiB,SAASvD,GAAIiD,QAAS,WAAKX,EAAMW,QAAQS,aAAapB,EAAMiB,SAASvD,GAAI,KAAxJ,UAA4CsC,EAAMiB,SAASvD,GAA3D,OANJ,uBAaL,SAAS2D,EAAcrB,GAQ1B,IADW,EACPsB,EAA4C,GADrC,cAEItB,EAAMxC,WAFV,IAEX,IAAI,EAAJ,qBAA+B,CAAC,IAAtB+D,EAAqB,QAC3BD,EAAgBC,EAAE7D,IAAM6D,GAHjB,8BAoCX,OAAGvB,EAAMwB,SAAS,IAEV,gCAtBgB,WACpB,IADuC,EACjCC,EAAmC,GADF,cAExBzB,EAAMxC,WAFkB,IAEvC,IAAI,EAAJ,qBAA+B,CAAC,IAAtB+D,EAAqB,QAC3BE,EAAkBC,KACd,cAACV,EAAD,CACIC,SAAUM,EAEVZ,QAAS,CACLS,aAAc,SAAC1D,EAAWG,GAAkByD,EAAgB5D,GAAIG,MAAQA,KAFvE0D,EAAE7D,MANoB,8BAavC,OACI,qBAAKuC,UAAU,6BAAf,SACKwB,IAQAE,GACD,wBAAQ1B,UAAU,4CAA4CU,QAlC1C,WAC5B,IAAI,IAAJ,MAA0BiB,OAAOC,QAAQP,GAAzC,eAA0D,CAAtD,0BACA,GADA,KACiB,IADjB,KACSzD,MAEL,YADAiE,MAAM,kDAId9B,EAAMW,QAAQoB,SAASH,OAAOC,QAAQP,KA2B9B,SACI,6BAAKtB,EAAMxC,UAAUwE,OAAS,EAAI,iBAAmB,kBAM7D,qBAAK/B,UAAU,2CAAf,SACI,sBAAKA,UAAU,oCAAf,UACI,oBAAIA,UAAU,eAAd,uBAGA,oBAAIA,UAAU,cAAd,iGAGA,wBAAQA,UAAU,4CACdU,QAAS,WAAKX,EAAMW,QAAQsB,QADhC,SAEI,qDClFjB,IAAMC,EAA2H,CACpIC,eAAgB,CACZC,MAAO,kBACPC,SAAU,sCACVC,MAAO,WAEXC,gBAAgB,CACZH,MAAO,mBACPC,SAAU,sEACVC,MAAO,WAEXE,aAAa,CACTJ,MAAO,gBACPC,SAAU,oDACVC,MAAO,WAEXG,gBAAgB,CACZL,MAAO,mBACPC,SAAU,sCACVC,MAAO,WAEXI,gBAAgB,CACZN,MAAO,mBACPC,SAAU,uEACVC,MAAO,YC9BA,MAA0B,mDCA1B,MAA0B,sDCA1B,MAA0B,kDCA1B,MAA0B,qDCA1B,MAA0B,qDCA1B,MAA0B,mDCA1B,MAA0B,mDCczC,SAASK,EAAoB3C,GAGzB,MAA8B4C,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,OACI,wBACI7C,UAAS,oIAEH4C,EAAU,aAAe,cAFtB,kBAITlC,QAAS,WACLX,EAAMW,UACNmC,GAAYD,IAPpB,SASI,6BAAKA,EAAU,OAAS,WAKpC,SAASE,EAAM/C,GAQX,OACI,sBACIC,UAAU,wBACVC,MAAO,CAAC8C,QAAQ,GAAD,OAAKhD,EAAMiD,IAAIC,EAAf,eAAuBlD,EAAMiD,IAAIE,EAAjC,QAFnB,UAGI,oBAAIlD,UAAU,cAAcC,MAAO,CAACa,QAAS,UAA7C,SACKf,EAAMoD,MAAMhB,QAEjB,mBAAGnC,UAAU,uBAAuBC,MAAO,CAACoC,MAAM,QAASnC,WAAW,QAASY,QAAQ,UAAvF,SACKf,EAAMnC,MAAMwF,QAAQ,KAEzB,oBAAInD,MAAO,CAACoD,YAAatD,EAAMoD,MAAMd,SACrC,mBAAGrC,UAAU,aAAb,SACKD,EAAMoD,MAAMf,cAO7B,SAASkB,EAAMvD,GAGXwD,QAAQC,IAAI,eAAgBzD,EAAM0D,QAElC,IAAMC,EAAgB,GAAhBA,EAA0B,EAA1BA,EAAoC,IACpCC,GAAWC,KAAKC,GAAwBD,KAAKC,GAAKH,EAAU,GAG5DI,EAAc,WAChB,OAAQJ,EAAc,EAAMA,EAAS,GAkBnCK,EAAQ,SAACnG,EAAcoG,GACzB,IARiBC,EAQXC,EAjBS,SAACtG,GAChB,IAAMuG,EANU,EAMGR,EAAwB/F,EACrCwG,EAAeR,KAAKS,KAAMF,EAAaP,KAAKC,IAClD,MAAQ,CACJS,EAAGF,EACHG,EAAkB,EAAfH,EACHT,EAAGQ,GAWOK,CAAW5G,GACnB6G,EAAkC,EAAlCA,EAAwC,EAC1CC,EATG,CACHxB,GAFae,EAUQ,CAACU,EAAEjB,EAAY,EAAIY,EAAIZ,EAAO,EAAc,GAARQ,EAAMI,EAAOM,IAAIZ,EAAMJ,KAAKC,GAAG,MARnFc,EAAIV,EAAEK,EAAIV,KAAKiB,IAAIZ,EAAEW,KAC1B3B,EAAGgB,EAAEU,EAAIV,EAAEK,EAAIV,KAAKkB,IAAIb,EAAEW,MAU9B,OAFIF,EAAOxB,GAAKuB,EACZC,EAAOzB,GAAKwB,EACT,CACHM,MAAM,GAAD,OAAKb,EAAMK,EAAX,OACLS,KAAK,GAAD,OAAKN,EAAOxB,EAAZ,OACJ+B,IAAI,GAAD,OAAKP,EAAOzB,EAAZ,OACHiC,UAAU,gCAAD,OAAkClB,EAAM,IAAxC,UAGjB,OACI,sBAAKhE,UAAU,0CAAf,UAII,sBAAKvC,GAAG,cAAR,UACI,cAACqF,EAAD,CAAOK,MAAOlB,EAAOC,eAAgBc,IAAK,CAACE,EAAE,EAAED,EAAE,GAAIrF,MAAOmC,EAAM0D,OAAOvB,iBACzE,cAACY,EAAD,CAAOK,MAAOlB,EAAOM,aAAcS,IAAK,CAACE,EAAE,EAAED,EAAE,GAAIrF,MAAOmC,EAAM0D,OAAOlB,eACvE,cAACO,EAAD,CAAOK,MAAOlB,EAAOK,gBAAiBU,IAAK,CAACE,EAAE,EAAED,EAAE,GAAIrF,MAAOmC,EAAM0D,OAAOnB,qBAK9E,sBAAK7E,GAAG,QAAQuC,UAAS,sBAA6B,EAAZ0D,EAAjB,aAAzB,UAII,qBAAK9C,IAAKuE,EAAMnF,UAAU,uBAAuBC,MAAO,CAAC8E,MAAM,GAAD,OAAKrB,EAAL,OAAkBuB,IAAI,GAAD,OAAInB,IAAJ,OAAuBkB,KAAK,GAAD,OAAIlB,IAAJ,UAI9G,qBAAKlD,IAAKwE,EAAcpF,UAAU,kBAAkBC,MAAO8D,EAAM,EAAG,OACpE,qBAAKnD,IAAKwE,EAAcpF,UAAU,kBAAkBC,MAAO8D,EAAM,EAAG,OACpE,qBAAKnD,IAAKwE,EAAcpF,UAAU,kBAAkBC,MAAO8D,EAAM,EAAG,MACpE,qBAAKnD,IAAKwE,EAAcpF,UAAU,kBAAkBC,MAAO8D,EAAM,EAAG,OACpE,qBAAKnD,IAAKwE,EAAcpF,UAAU,kBAAkBC,MAAO8D,EAAM,EAAG,OAIpE,qBAAKnD,IAAKyE,EAAYrF,UAAU,kBAAkBC,MAAO8D,EAAMhE,EAAM0D,OAAOvB,eAAgB,OAC5F,qBAAKtB,IAAK0E,EAAYtF,UAAU,kBAAkBC,MAAO8D,EAAMhE,EAAM0D,OAAOjB,gBAAiB,OAC7F,qBAAK5B,IAAK2E,EAAYvF,UAAU,kBAAkBC,MAAO8D,EAAMhE,EAAM0D,OAAOhB,gBAAiB,MAC7F,qBAAK7B,IAAK4E,EAAaxF,UAAU,kBAAkBC,MAAO8D,EAAMhE,EAAM0D,OAAOnB,gBAAiB,OAC9F,qBAAK1B,IAAK6E,EAAazF,UAAU,kBAAkBC,MAAO8D,EAAMhE,EAAM0D,OAAOlB,aAAc,UAK/F,sBAAK9E,GAAG,eAAR,UACI,cAACqF,EAAD,CAAOK,MAAOlB,EAAOO,gBAAiBQ,IAAK,CAACE,EAAE,EAAED,EAAE,GAAIrF,MAAOmC,EAAM0D,OAAOjB,kBAC1E,cAACM,EAAD,CAAOK,MAAOlB,EAAOQ,gBAAiBO,IAAK,CAACE,EAAE,EAAED,EAAE,GAAIrF,MAAOmC,EAAM0D,OAAOhB,wBAO1F,SAASiD,EAAQ3F,GAUb,IATA,IAAI4F,EAA2C,CAC3CzD,eAAgB,GAChBM,gBAAiB,GACjBC,gBAAiB,GACjBH,gBAAiB,GACjBC,aAAc,IAEdqD,EAAQ,EACNC,EAAS,CAAC,WAAW,UAAU,UAAU,aAAa,YAAY,aACxE,MAA0BlE,OAAOC,QAAQ7B,EAAM4F,WAA/C,eAA0D,CAAtD,0BAAOG,EAAP,KAAYC,EAAZ,KACA,KAAGH,EAAQjE,OAAOC,QAAQrE,GAAWwE,QAArC,CAQI4D,EAAUI,EAAMpI,MAAM8D,KAClB,qBAAczB,UAAU,UAAxB,UACI,qBAAsBA,UAAU,UAAhC,UAA2C4F,EAA3C,gBAAYE,EAAZ,QACA,oBAAwB9F,UAAU,oBAAoBC,MAAO,CAAC+F,WAAY,UAA1E,SAAsFD,EAAMrI,MAA5F,UAAYoI,EAAZ,UACA,oBAAyB9F,UAAU,UAAnC,SACI,mBAAGA,UAAS,eAAU6F,EAAOjC,KAAKqC,MAAMF,EAAMnI,SAA9C,SACKmI,EAAMnI,MAAM,EAAImI,EAAMnI,MAAQ,SAFvC,UAAYkI,EAAZ,aAHKA,IAWjBF,GAAS,GAEb,OACI,sBAAyB5F,UAAU,oBAAnC,UAEI,qBAAIvC,GAAG,aAAauC,UAAU,yCAAyCC,MAAO,CAACC,WAAY+B,EAAOC,eAAeG,OAAjH,4BAEI,sBAAMrC,UAAU,uBAAuBC,MAAO,CAACoC,MAAM,QAASnC,WAAW,QAASY,QAAQ,UAA1F,SACKf,EAAM0D,OAAOvB,eAAekB,QAAQ,QAG7C,uBAAOpD,UAAU,iBAAjB,SAAkC,gCAAQ2F,EAAUzD,mBAEpD,qBAAIzE,GAAG,cAAcuC,UAAU,yCAAyCC,MAAO,CAACC,WAAY+B,EAAOQ,gBAAgBJ,OAAnH,6BAEI,sBAAMrC,UAAU,uBAAuBC,MAAO,CAACoC,MAAM,QAASnC,WAAW,QAASY,QAAQ,UAA1F,SACKf,EAAM0D,OAAOhB,gBAAgBW,QAAQ,QAG9C,uBAAOpD,UAAU,iBAAjB,SAAkC,gCAAQ2F,EAAUlD,oBAEpD,qBAAIhF,GAAG,cAAcuC,UAAU,yCAAyCC,MAAO,CAACC,WAAY+B,EAAOO,gBAAgBH,OAAnH,6BAEI,sBAAMrC,UAAU,uBAAuBC,MAAO,CAACoC,MAAM,QAASnC,WAAW,QAASY,QAAQ,UAA1F,SACKf,EAAM0D,OAAOjB,gBAAgBY,QAAQ,QAG9C,uBAAOpD,UAAU,iBAAjB,SAAkC,gCAAQ2F,EAAUnD,oBAEpD,qBAAI/E,GAAG,WAAWuC,UAAU,yCAAyCC,MAAO,CAACC,WAAY+B,EAAOM,aAAaF,OAA7G,0BAEI,sBAAMrC,UAAU,uBAAuBC,MAAO,CAACoC,MAAM,QAASnC,WAAW,QAASY,QAAQ,UAA1F,SACKf,EAAM0D,OAAOlB,aAAaa,QAAQ,QAG3C,uBAAOpD,UAAU,iBAAjB,SAAkC,gCAAQ2F,EAAUpD,iBAEpD,qBAAI9E,GAAG,cAAcuC,UAAU,yCAAyCC,MAAO,CAACC,WAAY+B,EAAOK,gBAAgBD,OAAnH,6BAEI,sBAAMrC,UAAU,uBAAuBC,MAAO,CAACoC,MAAM,QAASnC,WAAW,QAASY,QAAQ,UAA1F,SACKf,EAAM0D,OAAOnB,gBAAgBc,QAAQ,QAG9C,uBAAOpD,UAAU,iBAAjB,SAAkC,gCAAQ2F,EAAUrD,sBAxC9C,eA8CX,SAAS4D,EAAQnG,GAWpB,MAA2B4C,oBAAkB,GAA7C,mBAAOwD,EAAP,KACA,GADA,KACmCxD,oBAAkB,IAArD,mBAAOgD,EAAP,KAAkBS,EAAlB,KACA,EAA8BzD,mBAAiB,IAA/C,mBAAO0D,EAAP,KAAgBC,EAAhB,KAGA,OAAGvG,EAAMwB,UAAU,EAEX,qBAAKvB,UAAU,4CAAf,SACI,sBAAKA,UAAU,qCAAf,UACI,oBAAIA,UAAU,6BAAd,8CAGA,yBAAQA,UAAU,6CAA6CU,QAAS,WAAKX,EAAMW,QAAQ6F,eAA3F,UACI,qBAAK3F,IAAKC,EAAWb,UAAU,kBAAkBC,MAAO,CAACa,QAAS,YADtE,2BAIA,oBAAId,UAAU,uBAAd,gBACA,uEACA,uBAAOvC,GAAG,YAAYuC,UAAU,yBAAyBiB,KAAK,OAAOC,KAAK,OACtE6E,MAASM,EACTG,SAAU,SAACC,GAAOH,EAAWG,EAAEjG,OAAOuF,UAE1C,wBAAQ/F,UAAU,yCACdU,QAAS,WAAKX,EAAMW,QAAQgG,YAAYL,IAD5C,iCASR,sBAAKrG,UAAU,mDAAf,UAKI,oBAAIA,UAAU,eAAd,0BACCmG,EAAQ,cAAC7C,EAAD,CAAOG,OAAQ1D,EAAM0D,SAAa,GAK3C,sBAAKzD,UAAU,4EAAf,UACI,wBAASA,UAAU,0CACfU,QAAS,WAAKX,EAAMW,QAAQiG,gBADhC,uBAIA,mBAAG3G,UAAU,MAAb,SAAoBD,EAAM6G,UAM9B,sBAAKnJ,GAAG,UAAUuC,UAAU,8BAA5B,UACI,sBAAKA,UAAU,iDAAf,UACI,oBAAIA,UAAU,gBAAd,0BACA,cAAC0C,EAAD,CAAqBhC,QAAS,WAAK0F,GAAeT,SAErDA,EAAY,cAACD,EAAD,CAASC,UAAW5F,EAAM4F,UAAWlC,OAAQ1D,EAAM0D,SAAa,SC5RjG,IAAIoD,EAASC,EAAQ,IA2MNC,EAzMO,WACpB,MAAwBpE,mBAAkD,UAA1E,mBAAOqE,EAAP,KAAaC,EAAb,KACA,EAAyCtE,mBAAwBpF,GAAjE,mBAAO2J,EAAP,KAAwBC,EAAxB,KACA,EAAgCxE,mBAAiB,GAAjD,mBAAOpB,EAAP,KAAiB6F,EAAjB,KACA,EAAwBzE,mBAAiB,IAAzC,mBAAOiE,EAAP,KAAaS,EAAb,KAEMC,EAAqB,WAGzB,IADA,IAAIC,EAAkC,GACtC,MAA0B5F,OAAOC,QAAQsF,GAAzC,eAA0D,CAAtD,0BAAYnB,GAAZ,WACe,IAAdA,EAAMnI,OACP2J,EAAoB9F,KAAKsE,GAG7B,OAAOwB,GAGHC,EAAS,SAACD,GAEE,IAAbhG,GAAgB6F,EAAY,GAI/B,IAAMK,EAAI7D,KAAK8D,IAAIH,EAAoBxF,OAAQ,GAC/C,OAAOwF,EAAoBI,MAAM,EAAGF,IAuBtC,SAASG,IAQP,IAPA,IAAMC,EAAS,CACX3F,eAAgB,EAChBO,gBAAiB,EACjBD,gBAAiB,EACjBD,aAAc,EACdD,gBAAiB,GAErB,MAA0BX,OAAOC,QAAQsF,GAAzC,eAA0D,CAAtD,0BAAYnB,GAAZ,WACA8B,EAAO9B,EAAMpI,OAASoI,EAAMnI,MAEhC,MAAQ,CACNsE,eAAgB2F,EAAO3F,eAAiB,EACxCO,gBAAiBoF,EAAOpF,gBAAkB,EAC1CD,gBAAiBqF,EAAOrF,gBAAkB,EAC1CF,gBAAiBuF,EAAOvF,gBAAkB,EAC1CC,aAAcsF,EAAOtF,aAAe,GAKxC,IAuCMuF,EAAgB,SAAClB,GACrBS,EAAQT,GACR,IAAMmB,EA7BgB,SAACC,GACvB,IAAIpB,EAAcqB,OAAOpB,EAAOqB,OAAOF,IAAIG,eAAe,WAAY,CAACC,aAAY,IAEnF,OADA7E,QAAQC,IAAI,UAAWwE,EAAG,KAAMpB,GACzBA,EA0BSyB,CAAgBzB,GAChC,GAzBsB,SAACA,GACvB,OAAiB,KAAdA,EAAK7E,QACNwB,QAAQC,IAAI,kBAAmBoD,IACxB,IAEPrD,QAAQC,IAAI,gBAAiBoD,IACtB,GAmBN0B,CAAiBP,GAAU,CAC5B,IAAMQ,EAhBmB,SAACR,GAG5B,IAFA,IAAInC,EAAQ,EACR2C,EAA6BC,KAAKC,MAAMD,KAAKE,UAAUxB,IAC3D,MAA0BvF,OAAOC,QAAQ2G,GAAzC,eAAuD,CAAnD,0BAAOzC,EAAP,KAAYC,EAAZ,KACS,cAARD,IACDC,EAAMnI,MAAQqK,OAAOF,EAAQnC,IAC7BA,GAAS,GAGb,OAAO2C,EAOgBI,CAAqBZ,GAC1CZ,EAAcoB,GACdnB,EAAY,KACZ7D,QAAQC,IAAI,sBAAuB+E,EAAc,qBAAsBrB,QAEvErF,MAAM,qCAAD,OAAsC+E,EAAtC,qEA0CT,OACE,sBAAK5G,UAAU,aAAf,UAKE,oBAAIvC,GAAG,mBAAmBuC,UAAU,WAAWC,MAAO,CAACoD,YAAa,aACpE,sBAAKrD,UAAU,qEAAf,UACE,sBAAKvC,GAAG,YAAYuC,UAAU,wCAA9B,UACE,qBAAKY,IAAKgI,EAAM5I,UAAU,oBAC1B,oBAAIA,UAAU,oBAAd,2BAIF,sBAAKvC,GAAG,YAAYuC,UAAU,UAA9B,UACE,wBAAQA,UAAU,QAAQU,QAAS,WAAKuG,EAAQ,WAAhD,kBACA,wBAAQjH,UAAU,gBAAgBC,MAAO,CAACoD,YAAa,WAAY3C,QAAS,WAAKuG,EAAQ,kBAAzF,qBACA,wBAAQjH,UAAU,gBAAgBC,MAAO,CAACoD,YAAa,WAAY3C,QAAS,WAAKuG,EAAQ,YAAzF,qBACA,mBAAGjH,UAAU,gBAAgBC,MAAO,CAACoD,YAAa,WAAY9C,KAAK,sCAAsCC,OAAO,SAAhH,yBAGJ,sBAAK/C,GAAG,eACNuC,UAAU,iEACVC,MAAO,CAAC4I,WAAYtH,EAAS,GAAGA,EAAS,IAAM,UAAY,UAF7D,UAIE,sDACA,qBAAKvB,UAAU,uDAAf,SACI,qBACIA,UAAU,yDACVC,MAAO,CAAC8E,MAAM,GAAD,OAAIxD,EAAJ,aAlEX,WACd,OAAOyF,GACL,IAAK,SAAU,OACb,cAAClH,EAAD,CACEY,QAAS,CACPC,MAAO,WAAKsG,EAAQ,qBAI1B,IAAK,gBAAiB,OACpB,cAAC7F,EAAD,CACEG,SAAWA,EACXhE,UAAWiK,EAAQF,KACnB5G,QAAS,CACPoB,SAAU,SAACgH,IA3GM,SAACA,GAG1B,IAHkD,EAG9CC,EAA2BP,KAAKC,MAAMD,KAAKE,UAAUxB,IAHP,cAInC4B,GAJmC,IAIlD,IAAI,EAAJ,qBAAuB,CAAC,IAAdnF,EAAa,QACrBoF,EAAUpF,EAAElG,IAAMkG,GAL8B,8BAOlDwD,EAAc4B,GAGd3B,GAAczF,OAAOC,QAAQrE,GAAWwE,OAASuF,IAAqBvF,QAAUJ,OAAOC,QAAQrE,GAAWwE,OAAS,KAGhF,IAAhCuF,IAAqBvF,QACtBkF,EAAQ,WA6FiC+B,CAAmBF,IACtD9G,KAAM,WAAKiF,EAAQ,eAIzB,IAAK,UAAW,OACd,cAACf,EAAD,CACEzC,OAAQmE,IACRjC,UAAWuB,EACXN,KAAMA,EACNrF,SAAUA,EACVb,QAAS,CACP6F,YAAa,WAAKU,EAAQ,kBAC1BP,YAAa,SAACL,GAAkByB,EAAczB,IAC9CM,aAAc,WAAOU,EAjFP,WAGtB,IAFA,IAAIT,EAAO,IACPqC,EAA8BT,KAAKC,MAAMD,KAAKE,UAAUxB,IAC5D,MAA0BvF,OAAOC,QAAQqH,GAAzC,eAAwD,CAApD,0BAAOnD,EAAP,KAAYC,EAAZ,KACS,cAARD,IACDc,GAAQb,EAAMnI,MAAMsL,YAGxB,IAAIC,EAAUtC,EAAOuC,OAAOnB,OAAOrB,IAEnC,OADArD,QAAQC,IAAI,UAAWoD,EAAM,KAAMuC,GAC5BA,EAuE+BE,QAIpC,QAAS,OAAO,0DAyCdC,OCrMOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.93390dd6.chunk.js","sourcesContent":["import {question} from '../model/types';\r\n\r\nexport const questions: Record<string, question> = {\r\n    q1:{id:'q1', text:`I always have a high level of physical energy`, axis:'PhysicalHealth', score:0},\r\n    q2:{id:'q2', text:`When I wake up, I feel rested and ready for a new day`, axis:'PhysicalHealth', score:0},\r\n    q3:{id:'q3', text:`I like exercising and do so regularly every week`, axis:'PhysicalHealth', score:0},\r\n    q4:{id:'q4', text:`My eating and drinking habits are healthy`, axis:'PhysicalHealth', score:0},\r\n    q5:{id:'q5', text:`My routines for exercising are well set up`, axis:'PhysicalHealth', score:0},\r\n    q6:{id:'q6', text:`I have regular ‘rests’ where I simply ‘am’`, axis:'PhysicalHealth', score:0},\r\n    q7:{id:'q7', text:`I sleep at least seven hours almost every day`, axis:'PhysicalHealth', score:0},\r\n    q8:{id:'q8', text:`I feel fit and healthy`, axis:'PhysicalHealth', score:0},\r\n    q9:{id:'q9', text:`I know what to do to recharge my batteries`, axis:'PhysicalHealth', score:0},\r\n    q10:{id:'q10', text:`I find it easy to concentrate and focus on my work`, axis:'CognitiveHealth', score:0},\r\n    q11:{id:'q11', text:`I manage my time effectively and well`, axis:'CognitiveHealth', score:0},\r\n    q12:{id:'q12', text:`I have a positive outlook on life`, axis:'CognitiveHealth', score:0},\r\n    q13:{id:'q13', text:`I try to find solutions to problems and issues`, axis:'CognitiveHealth', score:0},\r\n    q14:{id:'q14', text:`I can easily switch off when not studying/working`, axis:'CognitiveHealth', score:0},\r\n    q15:{id:'q15', text:`I like to think about things`, axis:'CognitiveHealth', score:0},\r\n    q16:{id:'q16', text:`I can recognize and name my positive and negative emotions`, axis:'EmotionalHealth', score:0},\r\n    q17:{id:'q17', text:`I am happy with all my emotions (negative and positive) and welcome them`, axis:'EmotionalHealth', score:0},\r\n    q18:{id:'q18', text:`I can regulate my emotions and can express them in a healthy way`, axis:'EmotionalHealth', score:0},\r\n    q19:{id:'q19', text:`I feel connected to others and know who to reach out to when I am feeling sad or upset`, axis:'EmotionalHealth', score:0},\r\n    q20:{id:'q20', text:`I create good relationships with others`, axis:'SocialHealth', score:0},\r\n    q21:{id:'q21', text:`I get along with my friends`, axis:'SocialHealth', score:0},\r\n    q22:{id:'q22', text:`I get along with my family`, axis:'SocialHealth', score:0},\r\n    q23:{id:'q23', text:`I feel confident`, axis:'SocialHealth', score:0},\r\n    q24:{id:'q24', text:`I feel that I can share with others easily`, axis:'SocialHealth', score:0},\r\n    q25:{id:'q25', text:`I can manage conflict and focus on a positive outcome for all involved`, axis:'SocialHealth', score:0},\r\n    q26:{id:'q26', text:`I have a passion/hobby I engage with on a regular basis`, axis:'SpiritualHealth', score:0},\r\n    q27:{id:'q27', text:`I know what I want to achieve in life`, axis:'SpiritualHealth', score:0},\r\n    q28:{id:'q28', text:`I have a sense of purpose in life and/or I know why I chose the course I did.`, axis:'SpiritualHealth', score:0},\r\n    q29:{id:'q29', text:`I know what my personal values are in life`, axis:'SpiritualHealth', score:0},\r\n    q30:{id:'q30', text:`I set goals which are aligned with these personal values`, axis:'SpiritualHealth', score:0},\r\n    q31:{id:'q31', text:`I have a fulfilling life`, axis:'SpiritualHealth', score:0},\r\n    q32:{id:'q32', text:`I enjoy reconnecting to nature on a regular basis`, axis:'SpiritualHealth', score:0},\r\n    q33:{id:'q33', text:`I believe I am learning and growing every day`, axis:'SpiritualHealth', score:0},\r\n    q34:{id:'q34', text:`I believe I am a compassionate human being`, axis:'SpiritualHealth', score:0},\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo-fe.680c79f8.svg\";","export default __webpack_public_path__ + \"static/media/bg.0154e95c.svg\";","export default __webpack_public_path__ + \"static/media/logo-petal.8a41023e.svg\";","import bg from '../assets/gfx/bg.svg';\r\nimport petalLogo from '../assets/gfx/logo-petal.svg'\r\n\r\nexport function Splash(props:{\r\n    onClick: {\r\n        start: Function;\r\n    }\r\n}):JSX.Element {\r\n    return(\r\n        <div className='w-full h-3/4 flex flex-col justify-center items-center' style={{\r\n            background: `url(${bg})`, \r\n            backgroundRepeat: 'no-repeat', \r\n            backgroundPosition: 'fixed', \r\n            backgroundSize: '100% auto'\r\n        }}>\r\n            <div className='m-2 p-8 rounded bg-white shadow-xl'>\r\n                <h1 className='p-2 text-3xl text-gray-500'>\r\n                    FSM Online\r\n                </h1>\r\n                <h1 className='p-2 text-3xl'>\r\n                    Assessment tool for wellbeing\r\n                </h1>\r\n                <p className='p-2 text-lg'>\r\n                    Empower students and achieve salutogenic wellbeing\r\n                </p>\r\n                <a className='m-2 p-3 rounded-xl bg-gray-600 text-white' href='https://flourishingeducation.co.uk' target='_blank' rel='noreferrer'>\r\n                    Learn more\r\n                </a>          \r\n                <button className='m-4 p-3 rounded-xl bg-green-600 text-white' onClick={()=>{props.onClick.start()}}>\r\n                    <img src={petalLogo} className='mr-2 w-8 h-auto' style={{display: 'inline'}}/>\r\n                    Start measure\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {question} from '../model/types';\r\n\r\nfunction Question(props:{\r\n    question: question;\r\n    onClick: {\r\n        updateAnswer: Function;\r\n    }\r\n}){\r\n    return(\r\n        <div className='p-2 m-2 d-flex flex-col'>\r\n            <p>{props.question.text}</p>\r\n            <div className='p-1 d-flex flex-row text-xs'>\r\n                Strongly disagree\r\n                <input className='m-1' type=\"radio\" key={`${props.question.id}_1`} name={props.question.id} onClick={()=>{props.onClick.updateAnswer(props.question.id, 1)}}/>\r\n                <input className='m-1' type=\"radio\" key={`${props.question.id}_2`} name={props.question.id} onClick={()=>{props.onClick.updateAnswer(props.question.id, 2)}}/> \r\n                <input className='m-1' type=\"radio\" key={`${props.question.id}_3`} name={props.question.id} onClick={()=>{props.onClick.updateAnswer(props.question.id, 3)}}/> \r\n                <input className='m-1' type=\"radio\" key={`${props.question.id}_4`} name={props.question.id} onClick={()=>{props.onClick.updateAnswer(props.question.id, 4)}}/> \r\n                <input className='m-1' type=\"radio\" key={`${props.question.id}_5`} name={props.question.id} onClick={()=>{props.onClick.updateAnswer(props.question.id, 5)}}/> \r\n                Strongly agree\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function Questionnaire(props:{\r\n    questions: question[]; // Five questions\r\n    progress: number;\r\n    onClick: {\r\n        continue: Function;\r\n        back: Function;\r\n    }\r\n}):JSX.Element {\r\n    let answersThisPage: Record<string, question> = {};\r\n    for(const q of props.questions){\r\n        answersThisPage[q.id] = q;\r\n    };\r\n\r\n    const validateFormAndContinue = () => {\r\n        for(const [key, value] of Object.entries(answersThisPage)){\r\n            if(value.score===0){\r\n                alert('Please answer all questions before continuing!');\r\n                return;\r\n            }\r\n        };\r\n        props.onClick.continue(Object.entries(answersThisPage));\r\n    }\r\n\r\n    const renderQuestions = (): JSX.Element => {\r\n        const renderedQuestions: JSX.Element[] = [];\r\n        for(const q of props.questions){\r\n            renderedQuestions.push(\r\n                <Question \r\n                    question={q}\r\n                    key={q.id}\r\n                    onClick={{\r\n                        updateAnswer: (id:string, score:number) => {answersThisPage[id].score = score}\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n        return(\r\n            <div className='flex flex-col items-center'> \r\n                {renderedQuestions}\r\n            </div>\r\n        )\r\n    };\r\n\r\n    if(props.progress<100){\r\n        return(\r\n            <div>\r\n                {renderQuestions()}\r\n                <button className='m-2 p-3 rounded-xl bg-gray-800 text-white' onClick={validateFormAndContinue}>\r\n                    <h1>{props.questions.length < 5 ? 'Finish measure' : 'Continue'}</h1>\r\n                </button>\r\n            </div>\r\n        )\r\n    }else{\r\n        return(\r\n            <div className='flex flex-ow justify-center items-center'>\r\n                <div className='p-4 m-2 max-w-lg rounded bg-white'>\r\n                    <h1 className='m-2 text-2xl'>\r\n                        All done! \r\n                    </h1>\r\n                    <h1 className='m-2 text-lg'>\r\n                        Click below to continue to see your results or refresh the web page to start again.\r\n                    </h1>\r\n                    <button className='m-2 p-3 rounded-xl bg-gray-800 text-white' \r\n                        onClick={()=>{props.onClick.back()}}>\r\n                        <h1>View results</h1>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}","export interface graphLabel {\r\n    title: string;\r\n    subtitle: string;\r\n    color: string;\r\n}\r\n\r\nexport const labels:Record<'PhysicalHealth' | 'SpiritualHealth' | 'SocialHealth' | 'EmotionalHealth' | 'CognitiveHealth', graphLabel> = {\r\n    PhysicalHealth: {\r\n        title: 'Physical Health',\r\n        subtitle: 'How well you take care of your body',\r\n        color: '#EA5455'\r\n    },\r\n    SpiritualHealth:{\r\n        title: 'Spiritual Health',\r\n        subtitle: 'A connection to the wider and personal meanings behind your actions',\r\n        color: '#2D4059'\r\n    },\r\n    SocialHealth:{\r\n        title: 'Social Health',\r\n        subtitle: 'Quality social relationships and support networks',\r\n        color: '#FFB400'\r\n    },\r\n    EmotionalHealth:{\r\n        title: 'Emotional Health',\r\n        subtitle: 'Your understanding of your emotions',\r\n        color: '#F07B3F'\r\n    },\r\n    CognitiveHealth:{\r\n        title: 'Cognitive Health',\r\n        subtitle: 'The pattern of your internal thoughts and “mental chatter”',\r\n        color: '#00B8A9'\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/flourishing_bulb_petal.66e30c15.svg\";","export default __webpack_public_path__ + \"static/media/flourishing_outline_petal.4b27e876.svg\";","export default __webpack_public_path__ + \"static/media/flourishing_red_petal.6cc564b5.svg\";","export default __webpack_public_path__ + \"static/media/flourishing_yellow_petal.3e9fb60d.svg\";","export default __webpack_public_path__ + \"static/media/flourishing_orange_petal.11302a82.svg\";","export default __webpack_public_path__ + \"static/media/flourishing_cyan_petal.0dea1b24.svg\";","export default __webpack_public_path__ + \"static/media/flourishing_navy_petal.8dcb58be.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport {question, questionnaire, results} from '../model/types';\r\nimport {questions} from '../assets/questionnaire';\r\n// Import assets\r\nimport {labels, graphLabel} from '../assets/labels';\r\nimport petalLogo from '../assets/gfx/logo-petal.svg'\r\nimport bulb from '../assets/gfx/flourishing_bulb_petal.svg';\r\nimport petalOutline from '../assets/gfx/flourishing_outline_petal.svg';\r\nimport petalForPH from '../assets/gfx/flourishing_red_petal.svg';\r\nimport petalForSoH from '../assets/gfx/flourishing_yellow_petal.svg';\r\nimport petalForEH from '../assets/gfx/flourishing_orange_petal.svg';\r\nimport petalForCH from '../assets/gfx/flourishing_cyan_petal.svg';\r\nimport petalForSpH from '../assets/gfx/flourishing_navy_petal.svg';\r\n\r\nfunction ToggleAnswersButton(props:{\r\n    onClick: Function;\r\n}):JSX.Element{\r\n    const [pressed, setPressed] = useState<boolean>(false);\r\n    return(\r\n        <button \r\n            className={`\r\n                m-2 p-3 rounded-xl bg-gray-800 text-white justify-self-end transition-all duration-500\r\n                ${pressed ? \"bg-red-600\" : \"bg-gray-800\"}\r\n            ` }\r\n            onClick={()=>{\r\n                props.onClick();\r\n                setPressed(!pressed);\r\n            }}>\r\n            <h1>{pressed ? 'Hide' : 'Show'}</h1>\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction Label(props:{\r\n    label: graphLabel;\r\n    pos:{\r\n        x:number;\r\n        y:number;\r\n    };\r\n    score: number;\r\n}):JSX.Element{\r\n    return(\r\n        <div \r\n            className='w-52 max-w-52 text-xs'\r\n            style={{padding: `${props.pos.y}rem ${props.pos.x}rem`}}>\r\n            <h1 className='font-medium' style={{display: 'inline'}}>\r\n                {props.label.title}\r\n            </h1>\r\n            <p className='p-1 m-1 rounded-full' style={{color:'white', background:'black', display:'inline'}}>\r\n                {props.score.toFixed(1)}\r\n            </p>\r\n            <hr style={{borderColor: props.label.color}}/>\r\n            <p className='font-light'>\r\n                {props.label.subtitle}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Compile graph of results\r\nfunction Graph(props:{\r\n    scores: results;\r\n}){\r\n    console.log('visualising:', props.scores);\r\n    // Base widths (w) and areas (a)\r\n    const w = {container: 14, bulb: 6, petal: 2.5};\r\n    const a = {bulb: Math.PI * w.bulb ^ 2, petal: Math.PI * w.petal ^ 2};\r\n    const scaleFactor = 1; // How much to scale petal areas by (e.g., scaleFactor * score * a.petal = area)\r\n    // Geometric calculations\r\n    const centerBulb  = ():number => { // Find center of canvas\r\n        return (w.container / 2) - (w.bulb / 2); \r\n    };\r\n    const scalePetal = (score: number):{r:number, d:number, a:number} => {\r\n        const scaledArea = a.petal * scaleFactor * score;\r\n        const scaledRadius = Math.sqrt( scaledArea / Math.PI );\r\n        return ({\r\n            r: scaledRadius,\r\n            d: scaledRadius * 2,\r\n            a: scaledArea\r\n        })\r\n    }\r\n    const pointOnCirc = (o:{c: number, r: number, rad:number}) => {\r\n        return({\r\n            x: o.c + o.r * Math.cos(o.rad), // Adjust centre\r\n            y: o.c + o.r * Math.sin(o.rad)\r\n        })\r\n    }\r\n    // Draw graph elements\r\n    const place = (score:number, angle:number):{width: string, top: string, left: string, transform: string} => {\r\n        const petal = scalePetal(score);\r\n        const offset:{x:number, y:number} = {x: 0, y: 0};\r\n        var coords = pointOnCirc({c:w.container/2,  r: (w.bulb/2) + (petal.r*.5), rad:angle*Math.PI/180});\r\n            coords.x += offset.x;\r\n            coords.y += offset.y;\r\n        return({ // Position on canvas\r\n            width: `${petal.d}rem`,\r\n            left: `${coords.x}rem`,\r\n            top: `${coords.y}rem`,\r\n            transform: `translate(-50%, -50%) rotate(${angle-270}deg)`\r\n        })\r\n    }\r\n    return(\r\n        <div className='flex flex-row justify-start items-start'>\r\n            {\r\n                // Labels (left)\r\n            }\r\n            <div id='labels-left'>\r\n                <Label label={labels.PhysicalHealth} pos={{x:1,y:0}} score={props.scores.PhysicalHealth}/>\r\n                <Label label={labels.SocialHealth} pos={{x:2,y:2}} score={props.scores.SocialHealth}/>\r\n                <Label label={labels.SpiritualHealth} pos={{x:0,y:1}} score={props.scores.SpiritualHealth}/>\r\n            </div>\r\n            {\r\n                // Petal graph\r\n            }\r\n            <div id='graph' className={`mx-8 w-56 h-${w.container*4} relative`}>\r\n                {\r\n                    // Central bulb\r\n                }\r\n                <img src={bulb} className='absolute h-auto z-10' style={{width: `${w.bulb}rem`, top:`${centerBulb()}rem`, left:`${centerBulb()}rem`}}/>\r\n                {\r\n                    // Petal outlines\r\n                }\r\n                <img src={petalOutline} className='absolute h-auto' style={place(5, 270)}/>\r\n                <img src={petalOutline} className='absolute h-auto' style={place(5, 342)}/>\r\n                <img src={petalOutline} className='absolute h-auto' style={place(5, 54)}/>\r\n                <img src={petalOutline} className='absolute h-auto' style={place(5, 126)}/>\r\n                <img src={petalOutline} className='absolute h-auto' style={place(5, 198)}/>\r\n                {\r\n                    // Petals showing score\r\n                }\r\n                <img src={petalForPH} className='absolute h-auto' style={place(props.scores.PhysicalHealth, 270)}/>\r\n                <img src={petalForEH} className='absolute h-auto' style={place(props.scores.EmotionalHealth, 342)}/>\r\n                <img src={petalForCH} className='absolute h-auto' style={place(props.scores.CognitiveHealth, 54)}/>\r\n                <img src={petalForSpH} className='absolute h-auto' style={place(props.scores.SpiritualHealth, 126)}/>\r\n                <img src={petalForSoH} className='absolute h-auto' style={place(props.scores.SocialHealth, 198)}/>\r\n            </div>\r\n            {\r\n                // Labels (right)\r\n            }\r\n            <div id='labels-right'>\r\n                <Label label={labels.EmotionalHealth} pos={{x:0,y:3}} score={props.scores.EmotionalHealth}/>\r\n                <Label label={labels.CognitiveHealth} pos={{x:0,y:2}} score={props.scores.CognitiveHealth}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Compile list of answers\r\nfunction Answers(props:{responses: questionnaire; scores: results;}){\r\n    var responses: Record<string, JSX.Element[]> = {\r\n        PhysicalHealth: [],\r\n        EmotionalHealth: [],\r\n        CognitiveHealth: [],\r\n        SpiritualHealth: [],\r\n        SocialHealth: []\r\n    };\r\n    var count = 1;\r\n    const colors = ['gray-600','red-500','red-300','yellow-400','green-300','green-500'];\r\n    for(const [key, value] of Object.entries(props.responses)){\r\n        if(count > Object.entries(questions).length){\r\n            continue\r\n        } else {\r\n            const color = (c:question['axis']) => {\r\n                switch(c){\r\n                    case 'PhysicalHealth': return ''\r\n                }\r\n            }\r\n            responses[value.axis].push(\r\n                <tr key={key} className='m-2 p-2'>\r\n                    <td key={`${key}_id`} className='p-2 w-4'>{count}.</td>\r\n                    <td key={`${key}_text`} className='p-2 text-gray-800' style={{whiteSpace: 'normal'}}>{value.text}</td>\r\n                    <td key={`${key}_score`} className='p-2 w-4'>\r\n                        <p className={`text-${colors[Math.floor(value.score)]}`}>\r\n                            {value.score>0 ? value.score : 'N/A'}\r\n                        </p>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        }\r\n        count += 1;\r\n    } \r\n    return(\r\n        <div key={'t_responses'} className='m-2 p-2 text-left'>\r\n\r\n            <h1 id='PhysicalQs' className='p-2 text-lg text-white font-md rounded' style={{background: labels.PhysicalHealth.color}}>\r\n                Physical Health\r\n                <span className='p-1 m-1 rounded-full' style={{color:'white', background:'black', display:'inline'}}>\r\n                    {props.scores.PhysicalHealth.toFixed(1)}\r\n                </span>\r\n            </h1>\r\n            <table className='m-2 p-4 w-full'><tbody>{responses.PhysicalHealth}</tbody></table>\r\n            \r\n            <h1 id='CognitiveQs' className='p-2 text-lg text-white font-md rounded' style={{background: labels.CognitiveHealth.color}}>\r\n                Cognitive Health\r\n                <span className='p-1 m-1 rounded-full' style={{color:'white', background:'black', display:'inline'}}>\r\n                    {props.scores.CognitiveHealth.toFixed(1)}\r\n                </span>    \r\n            </h1>\r\n            <table className='m-2 p-4 w-full'><tbody>{responses.CognitiveHealth}</tbody></table>\r\n\r\n            <h1 id='EmotionalQs' className='p-2 text-lg text-white font-md rounded' style={{background: labels.EmotionalHealth.color}}>\r\n                Emotional Health\r\n                <span className='p-1 m-1 rounded-full' style={{color:'white', background:'black', display:'inline'}}>\r\n                    {props.scores.EmotionalHealth.toFixed(1)}\r\n                </span>\r\n            </h1>\r\n            <table className='m-2 p-4 w-full'><tbody>{responses.EmotionalHealth}</tbody></table>\r\n            \r\n            <h1 id='SocialQs' className='p-2 text-lg text-white font-md rounded' style={{background: labels.SocialHealth.color}}>\r\n                Social Health\r\n                <span className='p-1 m-1 rounded-full' style={{color:'white', background:'black', display:'inline'}}>\r\n                    {props.scores.SocialHealth.toFixed(1)}\r\n                </span>\r\n            </h1>\r\n            <table className='m-2 p-4 w-full'><tbody>{responses.SocialHealth}</tbody></table>\r\n\r\n            <h1 id='SpiritualQs' className='p-2 text-lg text-white font-md rounded' style={{background: labels.SpiritualHealth.color}}>\r\n                Spiritual Health\r\n                <span className='p-1 m-1 rounded-full' style={{color:'white', background:'black', display:'inline'}}>\r\n                    {props.scores.SpiritualHealth.toFixed(1)}\r\n                </span>\r\n            </h1>\r\n            <table className='m-2 p-4 w-full'><tbody>{responses.SpiritualHealth}</tbody></table>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport function Results(props:{\r\n    scores: results;\r\n    responses: questionnaire;\r\n    progress: number;\r\n    code: string;\r\n    onClick: {\r\n        viewMeasure: Function;\r\n        loadResults: Function;\r\n        generateCode: Function;\r\n    }\r\n}):JSX.Element {\r\n    const [graph, showGraph] = useState<boolean>(true);\r\n    const [responses, showResponses] = useState<boolean>(false);\r\n    const [newCode, setNewCode] = useState<string>('');\r\n\r\n    // Show results\r\n    if(props.progress<=1){ // If measure not finished\r\n        return(\r\n            <div className='flex flex-col justify-center items-center'>\r\n                <div className='m-2 p-8 rounded bg-white shadow-xl'>\r\n                    <h1 className='p-2 text-3xl text-gray-500'>\r\n                        Your results will be shown here!\r\n                    </h1>\r\n                    <button className='m-4 p-3 rounded-xl bg-green-600 text-white' onClick={()=>{props.onClick.viewMeasure()}}>\r\n                        <img src={petalLogo} className='mr-2 w-8 h-auto' style={{display: 'inline'}}/>\r\n                        Take your measure now\r\n                    </button>\r\n                    <h1 className='text-2xl font-medium'>OR</h1>\r\n                    <p>Enter a code to load previous results:</p>\r\n                    <input id='codeInput' className='m-2 p-2 rounded border' type=\"text\" name=\"code\"\r\n                        value = {newCode}\r\n                        onChange={(e) => {setNewCode(e.target.value)}}\r\n                    />\r\n                    <button className='m-2 p-2 rounded bg-gray-600 text-white' \r\n                        onClick={()=>{props.onClick.loadResults(newCode)}}>\r\n                        Load responses\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else { // If measure finished\r\n        return(\r\n            <div className='w-full flex flex-col justify-center items-center'>\r\n\r\n                {\r\n                    // Graph\r\n                }    \r\n                <h1 className='p-4 text-3xl'>Your results</h1>\r\n                {graph ? <Graph scores={props.scores} /> : ''}\r\n                \r\n                {\r\n                    // Save code\r\n                }\r\n                <div className='m-2 bg-white text-sm rounded-xl flex flex-row justify-center align-center'>\r\n                    <button  className='p-2 rounded-xl bg-yellow-500 text-white' \r\n                        onClick={()=>{props.onClick.generateCode()}}>\r\n                        Save code\r\n                    </button>\r\n                    <p className='p-2'>{props.code}</p>\r\n                </div>\r\n\r\n                {\r\n                    // Answers\r\n                }\r\n                <div id='answers' className='m-2 p-4 bg-white rounded-xl'>\r\n                    <div className='p-2 flex flex-row justify-between items-center'>\r\n                        <h1 className='px-2 text-2xl'>Your answers</h1>\r\n                        <ToggleAnswersButton onClick={()=>{showResponses(!responses)}}/>\r\n                    </div>\r\n                    {responses ? <Answers responses={props.responses} scores={props.scores} /> : ''}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport './App.css';\r\n// Types\r\nimport {question, questionnaire, results} from './model/types';\r\n// Assets\r\nimport {questions} from './assets/questionnaire';\r\nimport logo from './assets/gfx/logo-fe.svg';\r\n// Views\r\nimport {Splash} from './templates/splash';\r\nimport {Questionnaire} from './templates/questionnaire';\r\nimport {Results} from './templates/results';\r\n\r\n// Import encoder\r\nvar base64 = require('base-64');\r\n\r\nconst App: React.FC = () => {\r\n  const [view, setView] = useState<'splash' | 'questionnaire' | 'results' >('splash');\r\n  const [recordedAnswers, recordAnswers] = useState<questionnaire>(questions);\r\n  const [progress, setProgress] = useState<number>(0);\r\n  const [code, setCode] = useState<string>('');\r\n\r\n  const remainingQuestions = (): question[] => {\r\n    // Get array of unanswered questions\r\n    var unansweredQuestions: question[] = [];\r\n    for(const [key, value] of Object.entries(recordedAnswers)){\r\n      if(value.score===0){\r\n        unansweredQuestions.push(value);\r\n      }\r\n    }\r\n    return(unansweredQuestions);\r\n  }\r\n\r\n  const sample = (unansweredQuestions: question[]): question[] => {\r\n    // Set measure in progress\r\n    if(progress === 0){setProgress(1)};\r\n    \r\n    // Shuffle array and return upto 5 random objects\r\n    //const shuffled = unansweredQuestions.sort(() => 0.5 - Math.random());\r\n    const n = Math.min(unansweredQuestions.length, 5);\r\n    return(unansweredQuestions.slice(0, n));\r\n  }\r\n\r\n  // Manage action on form continue button (continue or finish questionnaire)\r\n  const formContinueAction = (answers: question[]) => {\r\n\r\n    // Save answers\r\n    var newAnswer: questionnaire = JSON.parse(JSON.stringify(recordedAnswers)); // Clone existing results\r\n    for(const a of answers){ // Answer each question the user answered\r\n      newAnswer[a.id] = a; \r\n    };\r\n    recordAnswers(newAnswer); // Save answers\r\n\r\n    // Update progress\r\n    setProgress( (Object.entries(questions).length - remainingQuestions().length) / Object.entries(questions).length * 100 );\r\n\r\n    // Continue to results once finished\r\n    if(remainingQuestions().length === 0){\r\n      setView('results');\r\n    };\r\n  }\r\n\r\n  // Calculate score\r\n  function scoreResponses(): results{\r\n    const totals = {\r\n        PhysicalHealth: 0,\r\n        CognitiveHealth: 0,\r\n        EmotionalHealth :0,\r\n        SocialHealth: 0,\r\n        SpiritualHealth: 0\r\n    }\r\n    for(const [key, value] of Object.entries(recordedAnswers)){\r\n        totals[value.axis] += value.score;\r\n    }\r\n    return ({\r\n      PhysicalHealth: totals.PhysicalHealth / 9 ,\r\n      CognitiveHealth: totals.CognitiveHealth / 6,\r\n      EmotionalHealth: totals.EmotionalHealth / 4,\r\n      SpiritualHealth: totals.SpiritualHealth / 9,\r\n      SocialHealth: totals.SocialHealth / 6\r\n    })\r\n  }\r\n\r\n  // Encode scores\r\n  const encodeResponses = ():string => { \r\n    var code = '1';\r\n    var copyOfAnswers:questionnaire = JSON.parse(JSON.stringify(recordedAnswers));\r\n    for(const [key, value] of Object.entries(copyOfAnswers)){\r\n      if(key !== 'undefined'){\r\n        code += value.score.toString();\r\n      } else {continue};\r\n    };\r\n    var encoded = base64.encode(Number(code));\r\n    console.log('encoded', code, 'as', encoded);\r\n    return encoded;\r\n  };\r\n  const decodeResponses = (s:string):string => { \r\n    var code:string = Number(base64.decode(s)).toLocaleString('fullwide', {useGrouping:false});\r\n    console.log('decoded', s, 'as', code);\r\n    return(code);\r\n  };\r\n  const codeLikelyValid = (code:string) => {\r\n    if(code.length===35){\r\n      console.log('Validated code:', code)\r\n      return(true);\r\n    } else {\r\n      console.log('Invalid code:', code)\r\n      return(false);\r\n    }\r\n  };\r\n\r\n  const getResponsesFromCode = (decoded:string):questionnaire => {\r\n    var count = 1; // Skip leading 1\r\n    var newResponses:questionnaire = JSON.parse(JSON.stringify(recordedAnswers));\r\n    for(const [key, value] of Object.entries(newResponses)){\r\n      if(key !== 'undefined'){\r\n        value.score = Number(decoded[count]);\r\n        count += 1;\r\n      } else {continue};\r\n    };\r\n    return(newResponses);\r\n  }\r\n\r\n  const loadResponses = (code:string) => {\r\n    setCode(code);\r\n    const decoded = decodeResponses(code);\r\n    if(codeLikelyValid( decoded )){\r\n      const newResponses = getResponsesFromCode(decoded);\r\n      recordAnswers(newResponses);\r\n      setProgress(100)\r\n      console.log('Restored responses:', newResponses, 'to current results', recordedAnswers);\r\n    } else {\r\n      alert(`Error fetching results with code \"${code}\", please try again and contact support if the problem persists`)\r\n    }\r\n  }\r\n\r\n  // Select view\r\n  const content = (): JSX.Element => {\r\n    switch(view){\r\n      case 'splash': return(\r\n        <Splash \r\n          onClick={{\r\n            start: ()=>{setView('questionnaire')}\r\n          }}\r\n        />\r\n      );\r\n      case 'questionnaire': return(\r\n        <Questionnaire \r\n          progress={ progress }\r\n          questions={sample( remainingQuestions() )}\r\n          onClick={{\r\n            continue: (answers:question[]) => {formContinueAction(answers)},\r\n            back: ()=>{setView('results')}\r\n          }}\r\n        />\r\n      );\r\n      case 'results': return(\r\n        <Results \r\n          scores={scoreResponses()}\r\n          responses={recordedAnswers}\r\n          code={code}\r\n          progress={progress}\r\n          onClick={{\r\n            viewMeasure: ()=>{setView('questionnaire')},\r\n            loadResults: (newCode:string)=>{loadResponses(newCode)},\r\n            generateCode: () => {setCode( encodeResponses() )}\r\n          }}\r\n        />\r\n      );\r\n      default: return(<div>Error: Contact support</div>);\r\n    }\r\n  }\r\n\r\n  // Show view\r\n  return (\r\n    <div className=\"App h-full\">\r\n\r\n      {\r\n        // Navbar\r\n      }\r\n      <hr id='border-theme-top' className='border-2' style={{borderColor: '#C7D64F'}}/>\r\n      <nav className='p-2 flex flex-row justify-between items-end bg-white text-gray-500'>\r\n        <div id='nav-brand' className='flex flex-row justify-start items-end'>\r\n          <img src={logo} className='m-2 h-16 w-auto'/>\r\n          <h1 className='mx-2 p-1 text-3xl'>\r\n            FSM Online\r\n          </h1>\r\n        </div>\r\n        <div id='nav-links' className='text-sm'>\r\n          <button className='px-2 ' onClick={()=>{setView('splash')}}>Home</button>\r\n          <button className='px-2 border-l' style={{borderColor: '#C7D64F'}} onClick={()=>{setView('questionnaire')}}>Measure</button>\r\n          <button className='px-2 border-l' style={{borderColor: '#C7D64F'}} onClick={()=>{setView('results')}}>Results</button>\r\n          <a className='px-2 border-l' style={{borderColor: '#C7D64F'}} href='https://flourishingeducation.co.uk/' target='_blank'>About</a>\r\n        </div>\r\n      </nav>\r\n      <div id='progress-bar' \r\n        className='mb-4 p-2 bg-gray-100 flex flex-row justify-center items-center' \r\n        style={{visibility: progress>0&&progress<100 ? 'visible' : 'hidden'}}\r\n      >\r\n        <h1>Measure in progress:</h1>\r\n        <div className=\"m-2 h-4 w-3/4 max-w-xl rounded-xl shadow bg-gray-200\">\r\n            <div \r\n                className=\"h-full rounded-xl bg-wavy transition-all duration-1000\" \r\n                style={{width:`${progress}%`}}\r\n            />\r\n        </div>\r\n      </div>\r\n\r\n      {\r\n        // Current view\r\n        content()\r\n      }\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}